{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/services/global.service\";\nimport * as i3 from \"@angular/material/button\";\nexport class QuestionModalComponent {\n  constructor(dialogRef, data, globalService) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.globalService = globalService;\n    this.currentQuestionIndex = 0;\n    this.score = 0;\n    this.correctAnswers = 0;\n    this.incorrectAnswers = 0;\n  }\n  checkAnswer(userAnswer) {\n    const question = this.data.questions[this.currentQuestionIndex];\n    if (question.reponse === userAnswer) {\n      this.correctAnswers++;\n      this.globalService.addLogEntry();\n    } else {\n      this.incorrectAnswers++;\n    }\n    if (this.currentQuestionIndex < this.data.questions.length - 1) {\n      this.currentQuestionIndex++;\n    } else {\n      this.dialogRef.close({\n        correct: this.correctAnswers,\n        incorrect: this.incorrectAnswers\n      });\n    }\n  }\n  static #_ = this.ɵfac = function QuestionModalComponent_Factory(t) {\n    return new (t || QuestionModalComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.GlobalService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionModalComponent,\n    selectors: [[\"app-question-modal\"]],\n    decls: 10,\n    vars: 3,\n    consts: [[\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"]],\n    template: function QuestionModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"p\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"div\", 2)(6, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function QuestionModalComponent_Template_button_click_6_listener() {\n          return ctx.checkAnswer(true);\n        });\n        i0.ɵɵtext(7, \"Vrai\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function QuestionModalComponent_Template_button_click_8_listener() {\n          return ctx.checkAnswer(false);\n        });\n        i0.ɵɵtext(9, \"Faux\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate2(\"Question \", ctx.currentQuestionIndex + 1, \"/\", ctx.data.questions.length, \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.data.questions[ctx.currentQuestionIndex].question);\n      }\n    },\n    dependencies: [i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i3.MatButton],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["MAT_DIALOG_DATA","QuestionModalComponent","constructor","dialogRef","data","globalService","currentQuestionIndex","score","correctAnswers","incorrectAnswers","checkAnswer","userAnswer","question","questions","reponse","addLogEntry","length","close","correct","incorrect","_","i0","ɵɵdirectiveInject","i1","MatDialogRef","i2","GlobalService","_2","selectors","decls","vars","consts","template","QuestionModalComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","QuestionModalComponent_Template_button_click_6_listener","QuestionModalComponent_Template_button_click_8_listener","ɵɵadvance","ɵɵtextInterpolate2","ɵɵtextInterpolate"],"sources":["/Users/anassi/Desktop/Epitech/Beaver-Builders/src/app/pages/question-modal/question-modal.component.ts","/Users/anassi/Desktop/Epitech/Beaver-Builders/src/app/pages/question-modal/question-modal.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { GlobalService } from 'src/app/services/global.service';\n\n@Component({\n  selector: 'app-question-modal',\n  templateUrl: './question-modal.component.html',\n  styleUrls: ['./question-modal.component.scss']\n})\nexport class QuestionModalComponent {\n\n  currentQuestionIndex = 0;\n  score = 0;\n  correctAnswers = 0;\n  incorrectAnswers = 0;\n\n  constructor(\n    public dialogRef: MatDialogRef<QuestionModalComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any, private globalService: GlobalService,\n  ) { }\n\n  checkAnswer(userAnswer: boolean) {\n    const question = this.data.questions[this.currentQuestionIndex];\n    if (question.reponse === userAnswer) {\n      this.correctAnswers++;\n      this.globalService.addLogEntry();\n    } else {\n      this.incorrectAnswers++;\n    }\n\n    if (this.currentQuestionIndex < this.data.questions.length - 1) {\n      this.currentQuestionIndex++;\n    } else {\n      this.dialogRef.close({ correct: this.correctAnswers, incorrect: this.incorrectAnswers });\n    }\n  }\n\n\n}\n","<h1 mat-dialog-title>Question {{currentQuestionIndex + 1}}/{{data.questions.length}}</h1>\n<div mat-dialog-content>\n  <p>{{ data.questions[currentQuestionIndex].question }}</p>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"checkAnswer(true)\">Vrai</button>\n  <button mat-button (click)=\"checkAnswer(false)\">Faux</button>\n</div>"],"mappings":"AACA,SAASA,eAAe,QAAiC,0BAA0B;;;;;AAQnF,OAAM,MAAOC,sBAAsB;EAOjCC,YACSC,SAA+C,EACtBC,IAAS,EAAUC,aAA4B;IADxE,KAAAF,SAAS,GAATA,SAAS;IACgB,KAAAC,IAAI,GAAJA,IAAI;IAAe,KAAAC,aAAa,GAAbA,aAAa;IAPlE,KAAAC,oBAAoB,GAAG,CAAC;IACxB,KAAAC,KAAK,GAAG,CAAC;IACT,KAAAC,cAAc,GAAG,CAAC;IAClB,KAAAC,gBAAgB,GAAG,CAAC;EAKhB;EAEJC,WAAWA,CAACC,UAAmB;IAC7B,MAAMC,QAAQ,GAAG,IAAI,CAACR,IAAI,CAACS,SAAS,CAAC,IAAI,CAACP,oBAAoB,CAAC;IAC/D,IAAIM,QAAQ,CAACE,OAAO,KAAKH,UAAU,EAAE;MACnC,IAAI,CAACH,cAAc,EAAE;MACrB,IAAI,CAACH,aAAa,CAACU,WAAW,EAAE;KACjC,MAAM;MACL,IAAI,CAACN,gBAAgB,EAAE;;IAGzB,IAAI,IAAI,CAACH,oBAAoB,GAAG,IAAI,CAACF,IAAI,CAACS,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MAC9D,IAAI,CAACV,oBAAoB,EAAE;KAC5B,MAAM;MACL,IAAI,CAACH,SAAS,CAACc,KAAK,CAAC;QAAEC,OAAO,EAAE,IAAI,CAACV,cAAc;QAAEW,SAAS,EAAE,IAAI,CAACV;MAAgB,CAAE,CAAC;;EAE5F;EAAC,QAAAW,CAAA,G;qBA1BUnB,sBAAsB,EAAAoB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,iBAAA,CASvBtB,eAAe,GAAAqB,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;UATd1B,sBAAsB;IAAA2B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCTnCb,EAAA,CAAAe,cAAA,YAAqB;QAAAf,EAAA,CAAAgB,MAAA,GAA+D;QAAAhB,EAAA,CAAAiB,YAAA,EAAK;QACzFjB,EAAA,CAAAe,cAAA,aAAwB;QACnBf,EAAA,CAAAgB,MAAA,GAAmD;QAAAhB,EAAA,CAAAiB,YAAA,EAAI;QAE5DjB,EAAA,CAAAe,cAAA,aAAwB;QACHf,EAAA,CAAAkB,UAAA,mBAAAC,wDAAA;UAAA,OAASL,GAAA,CAAAzB,WAAA,CAAY,IAAI,CAAC;QAAA,EAAC;QAACW,EAAA,CAAAgB,MAAA,WAAI;QAAAhB,EAAA,CAAAiB,YAAA,EAAS;QAC5DjB,EAAA,CAAAe,cAAA,gBAAgD;QAA7Bf,EAAA,CAAAkB,UAAA,mBAAAE,wDAAA;UAAA,OAASN,GAAA,CAAAzB,WAAA,CAAY,KAAK,CAAC;QAAA,EAAC;QAACW,EAAA,CAAAgB,MAAA,WAAI;QAAAhB,EAAA,CAAAiB,YAAA,EAAS;;;QAN1CjB,EAAA,CAAAqB,SAAA,GAA+D;QAA/DrB,EAAA,CAAAsB,kBAAA,cAAAR,GAAA,CAAA7B,oBAAA,WAAA6B,GAAA,CAAA/B,IAAA,CAAAS,SAAA,CAAAG,MAAA,KAA+D;QAE/EK,EAAA,CAAAqB,SAAA,GAAmD;QAAnDrB,EAAA,CAAAuB,iBAAA,CAAAT,GAAA,CAAA/B,IAAA,CAAAS,SAAA,CAAAsB,GAAA,CAAA7B,oBAAA,EAAAM,QAAA,CAAmD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}